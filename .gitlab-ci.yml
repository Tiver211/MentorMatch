include:
  - project: pipelines/pipelines
    ref: master
    file:
      - "/jobs/build.yaml"
      - "/jobs/docker.yaml"
      - "/jobs/rules.yaml"

.build_back:
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  stage: build
  variables:
    DOCKERFILE_PATH: Dockerfile
    DOCKER_CONFIG: /kaniko/.docker
    CONTEXT: $CI_PROJECT_DIR
    IMAGE_TAG: $CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$IMAGE_TAG
    REGISTRY_USER: $CI_REGISTRY_USER
    REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
    REGISTRY_URL: $CI_REGISTRY
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CONTEXT}"
      --dockerfile "${CI_PROJECT_DIR}/${DOCKERFILE_PATH}"
      --destination "${IMAGE_NAME}"
      --cache=True
      --registry-mirror=dockerhub.timeweb.cloud

.build_front:
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  stage: build
  variables:
    DOCKERFILE_PATH: web/Dockerfile  # Путь к Dockerfile для фронта
    DOCKER_CONFIG: /kaniko/web/.docker
    CONTEXT: $CI_PROJECT_DIR/web  # Контекст сборки — папка back/web
    IMAGE_TAG: $CI_COMMIT_SHA
    IMAGE_NAME_WEB: $CI_REGISTRY_IMAGE/web:$IMAGE_TAG 
    REGISTRY_USER: $CI_REGISTRY_USER
    REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
    REGISTRY_URL: $CI_REGISTRY
  script:
    - mkdir -p /kaniko/web/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CONTEXT}"
      --dockerfile "${CI_PROJECT_DIR}/${DOCKERFILE_PATH}" 
      --destination "${IMAGE_NAME_WEB}"
      --cache=True
      --registry-mirror=dockerhub.timeweb.cloud

.global-variables:
  variables:
    SSH_USER: "ubuntu"
    SSH_HOST: "prod-team-35-lg7sic6v.final.prodcontest.ru"
    SSH_PRIVATE_KEY_BASE64: "$SSH_PRIVATE_KEY_BASE64"

.docker_compose_run:
  extends: .ssh
  stage: deploy
  variables:
    OPT_DOCKER: ""
    DOCKERFILE_PATH: Dockerfile
    IMAGE_TAG: $CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_DRIVER: overlay2
    PRUNE_COMMAND: "docker system prune -f -a"
    CONTAINER_NAME_SUFFIX: ""
    POSTGRES_USERNAME: $POSTGRES_USERNAME
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_DATABASE: $POSTGRES_DATABASE
    POSTGRES_CONN: "postgresql://$POSTGRES_USERNAME:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DATABASE"
  script:
    - AUTH_COMMAND="echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin"
    - ssh $SSH_ADDRESS "$AUTH_COMMAND"
    - ssh $SSH_ADDRESS "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - ssh $SSH_ADDRESS "mkdir -p /home/ubuntu/$CI_PROJECT_NAME"
    - scp docker-compose.yml $SSH_ADDRESS:/home/ubuntu/$CI_PROJECT_NAME/docker-compose.yml
    - ssh $SSH_ADDRESS "cd /home/ubuntu/$CI_PROJECT_NAME && echo 'IMAGE_NAME=$IMAGE_NAME' > .env  
        && echo 'POSTGRES_DATABASE=$POSTGRES_DATABASE' >> .env 
        && echo 'POSTGRES_USERNAME=$POSTGRES_USERNAME' >> .env 
        && echo 'POSTGRES_PASSWORD=$POSTGRES_PASSWORD' >> .env 
        && echo 'POSTGRES_CONN=$POSTGRES_CONN' >> .env
        && echo 'RANDOM_SECRET=$RANDOM_SECRET' >> .env
        && echo 'SMTP_PASSWORD=$SMTP_PASSWORD' >> .env
        && echo 'IMAGE_NAME_WEB=$IMAGE_NAME_WEB'"
    - ssh $SSH_ADDRESS "cd /home/ubuntu/$CI_PROJECT_NAME && docker compose down || true"
    - ssh $SSH_ADDRESS "cd /home/ubuntu/$CI_PROJECT_NAME && docker compose up -d"
    - sleep 10
    - ssh $SSH_ADDRESS "cd /home/ubuntu/$CI_PROJECT_NAME && docker compose logs > /tmp/docker-compose.log"
    - scp $SSH_ADDRESS:/tmp/docker-compose.log ./docker-compose.log

  artifacts:

    paths:
      - docker-compose.log

.heltchcheck:
  stage: heltchcheck
  extends: .ssh
  script:
    - ssh $SSH_ADDRESS "cd /home/ubuntu/$CI_PROJECT_NAME && docker ps --filter 'health=healthy' --format '{{.Names}}' | grep api"
  variables:
    OPT_DOCKER: ""
    DOCKERFILE_PATH: Dockerfile
    IMAGE_TAG: $CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_DRIVER: overlay2
    PRUNE_COMMAND: "docker system prune -f -a"
    CONTAINER_NAME_SUFFIX: ""
    POSTGRES_USERNAME: $POSTGRES_USERNAME
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_DATABASE: $POSTGRES_DATABASE
    POSTGRES_CONN: "postgresql://$POSTGRES_USERNAME:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DATABASE"

stages:
  - build
  - deploy
  - heltchcheck

heltchcheck:
  stage: heltchcheck
  extends:
    - .heltchcheck
    - .global-variables
    - .rules-merge-or-master

build_back:
  stage: build
  extends:
    - .build_back
    - .rules-merge-or-master
      
build_front:
  stage: build
  extends:
    - .build_front
    - .rules-merge-or-master

deploy:
  stage: deploy
  extends:
    - .docker_compose_run
    - .global-variables
    - .rules-merge-or-master
  variables:
    OPT_DOCKER: "-p 443:443"
